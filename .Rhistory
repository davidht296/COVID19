library(datasets)  # Load built-in datasets
head(iris)         # Show the first six lines of iris data
# Clear console
cat("\014")
# I recommend "pacman" for managing add-on packages. It will
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Then load the package by using either of the following:
require(pacman)  # Gives a confirmation message.
library(pacman)  # No message.
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
# Clear packages
detach("package:datasets", unload = TRUE)  # For base
p_unload(all)  # Easier: clears all add-ons
# Clear console
cat("\014")
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
# LOAD PACKAGES ############################################
# install packages, if needed, and then load the packages.
install.packages("pacman")
# Or, by using "pacman::p_load" you can use the p_load
# function from pacman without actually loading pacman.
# These are packages I load every time.
pacman::p_load(pacman, dplyr, GGally, ggplot2, ggthemes,
ggvis, httr, lubridate, plotly, rio, rmarkdown, shiny,
stringr, tidyr)
p_unload(all)  # Easier: clears all add-ons
# Clear console
cat("\014")
library(datasets)  # Load built-in datasets
plot(iris$Species)  # Categorical variable
plot(iris$Petal.Length)  # Quantitative variable
plot(iris$Species, iris$Petal.Width)  # Cat x quant
plot(iris$Petal.Length, iris$Petal.Width)  # Quant pair
plot(iris)   # Scatterplot matrix for iris data
head(mtcars)
?mtcars
hist(iris$Sepal.Length)
hist(iris$Sepal.Width)
hist(iris$Petal.Length)
hist(iris$Petal.Width)
# Put graphs in 3 rows and 1 column
par(mfrow = c(3, 1))
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, gganimate, ggthemes, gifski, lubridate,
reshape2, rio, tidyverse, transformr,  zoo)
setwd("C:/Users/david/Desktop/David/PD & Personal/R data analysis/GitHub/COVID19") #*remember to change \ to /
# LOAD DATA ################################################
data <- import("cases_daily_state.csv") # from: https://infogram.com/1p0lp9vmnqd3n9te63x3q090ketnx57evn5?live
View(data)
# WORK WITH DATA ###########################################
data <- data %>%
mutate(Date = seq.Date(as.Date("2020/01/25"), as.Date(Sys.Date()), "days")) %>% # set dates to correct format
mutate(AUS = rowSums(data[,2:9]))
data[is.na(data)] <- 0
# WORK WITH DATA ###########################################
data <- data %>%
mutate(Date = seq.Date(as.Date("2020/01/25"), as.Date(Sys.Date()), "days")) %>% # set dates to correct format
mutate(AUS = rowSums(data[,2:9]))
# LOAD DATA ################################################
data <- import("cases_daily_state.csv") # from: https://infogram.com/1p0lp9vmnqd3n9te63x3q090ketnx57evn5?live
data[is.na(data)] <- 0
# WORK WITH DATA ###########################################
data <- data %>%
mutate(Date = seq.Date(as.Date("2020/01/25"), as.Date(Sys.Date()), "days")) %>% # set dates to correct format
mutate(AUS = rowSums(data[,2:9]))
View(data)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
setwd("C:/Users/david/Desktop/David/PD & Personal/R data analysis/GitHub/COVID19") #*remember to change \ to /
# LOAD DATA ################################################
data <- import("cases_daily_state.csv") # from: https://infogram.com/1p0lp9vmnqd3n9te63x3q090ketnx57evn5?live
data[is.na(data)] <- 0
# LOAD DATA ################################################
data <- import("cases_daily_state.csv") # from: https://infogram.com/1p0lp9vmnqd3n9te63x3q090ketnx57evn5?live
# Use pacman to load add-on packages as desired
pacman::p_load(pacman, dplyr, gganimate, ggthemes, gifski, lubridate,
reshape2, rio, tidyverse, transformr,  zoo)
# LOAD DATA ################################################
data <- import("cases_daily_state.csv") # from: https://infogram.com/1p0lp9vmnqd3n9te63x3q090ketnx57evn5?live
data[is.na(data)] <- 0
# WORK WITH DATA ###########################################
data <- data %>%
mutate(Date = seq.Date(as.Date("2020/01/25"), as.Date(Sys.Date()), "days")) %>% # set dates to correct format
mutate(AUS = rowSums(data[,2:9]))
n <- nrow(data)
View(data)
data.NSW <- data %>%
select(Date, NSW) %>%
mutate(State = rep("NSW", n)) %>%
mutate(MS7 = rollsum(NSW, 7, fill = NA, align = "right")) %>%
mutate(Cum = cumsum(NSW)) %>%
filter(Date >= "2020/02/25") %>%
.[,c(1,3,2,4,5)] %>%
setNames(., c("Date", "State", "New", "MS7", "Cum"))
data.VIC <- data %>%
select(Date, VIC) %>%
mutate(State = rep("VIC", n)) %>%
mutate(MS7 = rollsum(VIC, 7, fill = NA, align = "right")) %>%
mutate(Cum = cumsum(VIC)) %>%
filter(Date >= "2020/02/25") %>%
.[,c(1,3,2,4,5)] %>%
setNames(., c("Date", "State", "New", "MS7", "Cum"))
data.AUS <- data %>%
select(Date, AUS) %>%
mutate(State = rep("AUS", n)) %>%
mutate(MS7 = rollsum(AUS, 7, fill = NA, align = "right")) %>%
mutate(Cum = cumsum(AUS)) %>%
filter(Date >= "2020/02/25") %>%
.[,c(1,3,2,4,5)] %>%
setNames(., c("Date", "State", "New", "MS7", "Cum"))
data.ALL <- bind_rows(data.NSW, data.VIC, data.AUS)
View(data.ALL)
View(data.ALL)
View(data.NSW)
View(data.ALL)
### FIRST WAVE ##############################
data1 <- data.ALL %>%
filter(Date >= "2020/02/25" & Date <= "2020/06/06")
mycolors <- c("#54A338", "#1F83B4", "#1a476f")
plot1 <- data1 %>%
ggplot(.,aes(x=Cum, y=MS7, color=State)) +
geom_line(size = .8, alpha = .8) +
scale_x_log10() +
scale_y_log10() +
geom_abline(colour="#D23E4E", linetype = "longdash") +
labs(title = "COVID-19 First Wave", subtitle = "Date: {frame_along}",
x = 'Cumulative cases (Since 25 February 2020)',
y = 'New cases (Past 7 days)',
color = "State") +
theme_gdocs() +
scale_color_manual(values = mycolors)
View(data.ALL)
?summary.yearmon
View(data.ALL)
